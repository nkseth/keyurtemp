name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  - develop

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '65e5d745-6ef4-43b0-a466-4532d1d12b47'
  imageRepository: 'simpleaccounts-io-strapi-frontend'
  containerRegistry: 'datainn.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
  - stage: ci_build_simpleAccounts_io
    displayName: CI Build for SimpleAccounts.io
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: build
        displayName: Build & Push SimpleAccounts.io Website
        timeoutInMinutes: 30

        steps:
          - task: CmdLine@2
            inputs:
              script: 'npm i --package-lock-only'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: Cache npm
          - script: npm ci

          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - script: |
              npm rebuild node-sass
              npm run build
            displayName: 'npm install and build'

          - task: Cache@2
            displayName: Cache task
            inputs:
              key: 'docker | "$(Agent.OS)" | cache'
              path: $(Pipeline.Workspace)/simpleaccounts-io-frontend-docker
              cacheHitVar: CACHE_RESTORED                #Variable to set to 'true' when the cache is restored

          - script: |
              docker load -i $(Pipeline.Workspace)/simpleaccounts-io-frontend-docker/simpleaccounts-io-frontend-docker-cache.tar
            displayName: Docker restore
            condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          - script: |
              mkdir -p $(Pipeline.Workspace)/simpleaccounts-io-frontend-docker
              docker save -o $(Pipeline.Workspace)/simpleaccounts-io-frontend-docker/simpleaccounts-io-frontend-docker-cache.tar datainn.azurecr.io/simpleaccounts-io-strapi-frontend:$(tag)
            displayName: Docker save
            condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))

